/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAVI 1
#define NUMB 2
#define FUNC 3
 
&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

&lt {
    tapping-term-ms = <150>;
    flavor = "tap-preferred";
};

&sk {
     release-after-ms = <750>;
     quick-release;
};

/ {
    behaviors {
        hk: held_key {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "tap-preferred";
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };
        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <500>;
            quick-release;
            ignore-modifiers;
        };
        hml: homerow_modsl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <275>;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31>;
            hold-trigger-on-release;
        };
        hmr: homerow_modsr {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;
            flavor = "balanced";
            tapping-term-ms = <300>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <275>;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33>;
            hold-trigger-on-release;
        };
        sft_caps: shift_capsword {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&skq LSHIFT>, <&caps_word>;
        };
        csemi: comma_semicolon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dcoln: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp SEMI>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        #include "combos.overlay"
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
        bindings = <
    &kp Q           &kp W           &kp F           &kp P           &kp B           &kp J           &kp L           &kp U           &kp Y           &kp SQT    
    &hml LGUI A     &hml LALT R     &hml LCTL S     &hml LSHIFT T   &kp G           &kp M           &hmr RSHIFT N   &hmr RCTL E     &hmr RALT I     &hmr RGUI O
    &kp Z           &kp X           &kp C           &kp D           &kp V           &kp K           &kp H           &csemi          &dcoln          &kp FSLH   
                                                    &lt NUMB LSHIFT &kp BSPC        &kp ENTER       &lt NAVI SPACE
        >;
        };
        navi_layer {
        bindings = <
    &kp INS         &kp HOME        &kp UP          &kp END         &kp PG_UP       &none           &none           &none           &none           &none
    &kp LC(A)       &kp LEFT        &kp DOWN        &kp RIGHT       &kp PG_DN       &kp C_VOL_UP    &sk RSHIFT      &sk RCTL        &sk RALT        &sk RGUI      
    &kp LC(Z)       &kp LC(X)       &kp LC(C)       &kp LC(V)       &kp LC(Y)       &kp C_VOL_DN    &kp C_PREV      &kp C_PP        &kp C_NEXT      &kp C_STOP
                                                    &trans          &kp DEL         &trans          &trans
        >;
        };
        numb_layer {
        bindings = <
    &none           &none           &none           &none           &none           &hk F12 EQUAL   &hk F7 N7       &hk F8 N8       &hk F9 N9       &kp DOT
    &sk LGUI        &sk LALT        &sk LCTL        &sk LSHIFT      &none           &hk F11 PLUS    &hk F4 N4       &hk F5 N5       &hk F6 N6       &kp ASTRK
    &none           &none           &none           &none           &none           &hk F10 MINUS   &hk F1 N1       &hk F2 N2       &hk F3 N3       &kp FSLH
                                                    &trans          &trans          &trans          &lt NAVI N0
        >;
        };
        func_layer {
                        bindings = <
    &bootloader     &none           &none           &none           &out OUT_BLE    &out OUT_USB    &none           &none           &none           &sys_reset
    &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &none           &none           &none           &none           &none           &bt BT_CLR
    &bt BT_DISC 0   &bt BT_DISC 1   &bt BT_DISC 2   &bt BT_DISC 3   &none           &none           &none           &none           &none           &none
                                                    &trans          &trans          &trans          &trans
        >;
        };
    };
};